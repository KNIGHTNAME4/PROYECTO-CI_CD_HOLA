name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:

  # CAP 1: Build y tests
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Run Tests
        run: |
           python -m pytest -v tests/

     # - name: Install SonarScanner
      #  run: |
       #   npm install -g sonar-scanner

      #- name: SonarQube Scan
       # uses: SonarSource/sonarcloud-github-action@v2
       # with:
        #  args: >
         #   -Dsonar.projectKey=FlaskFeedback
         #   -Dsonar.organization=TU_ORG
         #   -Dsonar.host.url=https://sonarcloud.io
       # env:
        
        #SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          # -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  # CAP 2: Docker Build y Push
  docker:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          docker build -t tu_usuario_flask_ci:v1 .
          docker tag tu_usuario_flask_ci:v1 knight4444/tu_usuario_flask_ci:version1.0
          docker push knight4444/tu_usuario_flask_ci:version1.0

  # CAP 3: Deploy en Kubernetes
  kubernetes:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl rollout status deployment/flask-deployment
